# pylint: disable=unexpected-keyword-arg
"""
Manage sample dataset and mapping for testing

- Run this file directly to (re)generate sample files.
- Define pytest session level fixture.

"""
import json
import os
import warnings

import elasticsearch
import pytest

TEST_INDEX = "bts_test"
TEST_DOC_TYPE = "gene"
TEST_HOST = "http://localhost:9200"


def prepare():
    """
    Create two files in this folder that defines a test index.
    Data is a random set of 100 mygene documents from an ES6 index.

        ./test_data_index.json # includes type name
        ./test_data_query.json # the query to generate test data
        ./test_data.ndjson  # used for bulk api

        Envs: ES_SOURCE Assume source cluster has only one index.
    """
    client = elasticsearch.Elasticsearch(os.environ["ES_SOURCE"])
    dirname = os.path.dirname(__file__)

    mapping = client.indices.get(index="_all")
    with open(os.path.join(dirname, "test_data_index.json"), "w") as file:
        setting = next(iter(mapping.values()))
        setting["settings"]["index"] = {"analysis": setting["settings"]["index"]["analysis"]}
        json.dump(setting, file, indent=2)

    with open(os.path.join(dirname, "test_data_query.json"), "r") as file:
        query = json.load(file)
        docs = client.search(body=query, size=100)

    with open(os.path.join(dirname, "test_data.ndjson"), "w") as file:
        for hit in docs["hits"]["hits"]:
            json.dump({"index": {"_id": hit["_id"]}}, file)
            file.write("\n")
            json.dump(hit["_source"], file)
            file.write("\n")

if __name__ == "__main__":
    prepare()
