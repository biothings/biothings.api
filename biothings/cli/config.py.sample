########################################
# DATA PLUGIN CONFIGURATION VARIABLES #
########################################
# Typicaly, you don't need to include a config.py module to run the BioThings CLI tool to
# test your data plugin locally. A default config module is setup at the launch of the CLI.
# However, you can always include an additional config.py module to override the default
# config settings, e.g. alternative DATA_ARCHIVE_ROOT, HUB_DB_BACKEND for different db path.
# The available config settings can be found at biothings.hub.default_config module (note that
# not all settings are relevant to the CLI)

# This file should be place at the same directory with developed data plugin:

# When using dataplugin-hub sub commands
# $ ls -al
#  config.py
#  .biothings_hub
#     .data_src_database
#     archive
#     biothings_hubdb
#  your_data_plugin_folder
#     manifest.json
#     parser.py

# When using dataplugin sub commands inside a data plugin folder
# $ ls -al
#  config.py
#  .biothings_hub
#     .data_src_database
#     archive
#     biothings_hubdb
#  manifest.json
#  parser.py

DATA_SRC_DATABASE = '.data_src_database'
DATA_HUB_DB_DATABASE = 'data_hub_db_database'
HUB_DB_BACKEND = {
    "module": "biothings.utils.sqlite3",
    "sqlite_db_folder": ".biothings_hub""
}
DATA_ARCHIVE_ROOT = ".biothings_hub/archive"

# Add new entry in DOCKER_CONFIG if you want to use a different docker host for your
# docker-based data plugin, other than the default docker host running on your localhost.
# DOCKER_CONFIG = {
#     "docker1": {"tls_cert_path": None, "tls_key_path": None, "client_url": ""},
#     "localhost": {"client_url": "unix://var/run/docker.sock"},
# }
